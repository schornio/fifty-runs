datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
    provider = "prisma-client-js"
}

enum Visibility {
    public
    protected
    private
}

model User {
    id                       String            @id @default(uuid())
    name                     String            @unique
    nameId                   String            @unique
    email                    String            @unique
    emailVerified            Boolean           @default(false)
    emailVerificationToken   String?
    password                 String
    passwordResetToken       String?
    passwordResetTokenExpiry DateTime?
    image                    String?
    sessions                 Session[]
    reactions                Reaction[]
    postings                 Posting[]
    comments                 Comment[]
    runningStatistic         RunningStatistic?

    @@unique([nameId, email])
    @@index([emailVerificationToken])
}

model Session {
    id        String   @id @default(uuid())
    token     String   @unique
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    createdAt DateTime @default(now())
    expiresAt DateTime
}

model Posting {
    id                String           @id @default(uuid())
    date              DateTime
    text              String?
    image             String?
    user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId            String
    visibility        Visibility       @default(protected)
    reactions         Reaction[]
    comments          Comment[]
    runningExercise   RunningExercise?
    runningExerciseId String?
}

model Comment {
    id        String   @id @default(uuid())
    text      String
    date      DateTime @default(now())
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    posting   Posting  @relation(fields: [postingId], references: [id])
    postingId String
}

model Reaction {
    id        String   @id @default(uuid())
    type      String
    date      DateTime @default(now())
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    Posting   Posting? @relation(fields: [postingId], references: [id])
    postingId String?

    @@unique([userId, postingId])
}

model RunningExercise {
    id                String  @id @default(uuid())
    distanceInMeters  Int
    durationInSeconds Int
    posting           Posting @relation(fields: [postingId], references: [id], onDelete: Cascade)
    postingId         String  @unique
}

model RunningStatistic {
    id                String @id @default(uuid())
    numberOfRuns      Int
    distanceInMeters  Int
    durationInSeconds Int
    user              User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId            String @unique
}
